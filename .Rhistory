} else {
V(network)[node]$color <- adjustcolor("#80b1d3", alpha.f = highlight_m_alpha)
}
}
} else if (highlight_node %in% DEmir$degs) {
# 如果不是，将高亮节点设置为目标颜色，与之相连的节点设置为 TF 颜色
connected_nodes <- neighbors(network, highlight_node, mode = "all")
connected_nodes2 <- neighbors(network, highlight_node, mode = "in")
connected_nodes3 <- c(names(connected_nodes2))
connected_nodes4 <- neighbors(network, highlight_node, mode = "out")
connected_nodes5 <- c(names(connected_nodes4))
V(network)[highlight_node]$color <- (adjustcolor(highlight_mir_color, alpha.f = 0.9))
for (node in names(connected_nodes)) {
if (node %in% DElnc$degs) {
V(network)[node]$color <- adjustcolor(highlight_lnc_color, alpha.f = highlight_lnc_alpha)
} else if (node %in% DEcirc$degs) {
V(network)[node]$color <- adjustcolor(highlight_circ_color, alpha.f = highlight_circ_alpha)
} else if (node %in% DEm$up) {
V(network)[node]$color <- adjustcolor("#fb8072", alpha.f = highlight_m_alpha)
} else {
V(network)[node]$color <- adjustcolor("#80b1d3", alpha.f = highlight_m_alpha)
}
}
} else {
# 如果不是，将高亮节点设置为目标颜色，与之相连的节点设置为 TF 颜色
all_upstream_nodes <- get_upstream(network, highlight_node)
for (node in all_upstream_nodes) {
if (node %in% DEmir$degs) {
V(network)[node]$color <- adjustcolor(highlight_mir_color, alpha.f = highlight_mir_alpha)
} else if (node %in% DElnc$degs) {
V(network)[node]$color <- adjustcolor(highlight_lnc_color, alpha.f = highlight_lnc_alpha)
} else if (node %in% DEcirc$degs) {
V(network)[node]$color <- adjustcolor(highlight_circ_color, alpha.f = highlight_circ_alpha)
} else if (node %in% DEm$up) {
V(network)[node]$color <- adjustcolor("#fb8072", alpha.f = highlight_m_alpha)
} else {
V(network)[node]$color <- adjustcolor("#80b1d3", alpha.f = highlight_m_alpha)
}
}
}
# 获取所有与 highlight_node 相连的边
if (highlight_node %in% c(DElnc$degs, DEcirc$degs)) {
connected_edges <- incident_edges(network, all_downstream_nodes, mode = "out")
E(network)[unlist(connected_edges)]$color <- highlight_edge_color
} else if (highlight_node %in% DEmir$degs) {
connected_edges <- incident_edges(network, connected_nodes3, mode = "in")
connected_edges2 <- incident_edges(network, connected_nodes5, mode = "out")
E(network)[unlist(connected_edges)]$color <- highlight_edge_color
E(network)[unlist(connected_edges2)]$color <- highlight_edge_color
} else {
connected_edges <- incident_edges(network, all_upstream_nodes, mode = "in")
E(network)[unlist(connected_edges)]$color <- highlight_edge_color
}
# 设置相关节点和边的颜色
#E(network)[unlist(connected_edges)]$color <- highlight_edge_color
#设置网络图的布局
if (is.null(netlayout)) {
netlayout <- layout_(network,
with_kk())
}
# 设置 PDF 的输出文件名、高度和宽度
pdf.name <- paste0("ceRNA_highlight_", highlight_node, ".pdf")
pdf(file = pdf.name, height = pdf_height, width = pdf_width)
# 绘制网络图
plot(network, edge.arrow.size = 0.4,
layout = netlayout,
vertex.label.family = vertex_label_family,
res = c(1200, 1200))
# 关闭 PDF 设备
dev.off()
}
#
plot_highlighted_CEnetwork(network, highlight_node = "mmu-miR-23b-3p")
highlight_node = "mmu-miR-23b-3p"
connected_nodes2 <- neighbors(network, highlight_node, mode = "in")
connected_nodes3 <- c(names(connected_nodes2))
connected_nodes3
connected_nodes4 <- neighbors(network, highlight_node, mode = "out")
connected_nodes5 <- c(names(connected_nodes4))
connected_nodes5
connected_edges <- incident_edges(network, connected_nodes3, mode = "in")
connected_edges
connected_nodes3 <- c(highlight_node, names(connected_nodes2))
connected_nodes3
connected_edges <- incident_edges(network, connected_nodes3, mode = "in")
connected_edges
connected_edges2 <- incident_edges(network, connected_nodes5, mode = "out")
connected_edges2
plot_highlighted_CEnetwork <- function(network,
highlight_node,
highlight_circ_color = "#459943",
highlight_lnc_color = "#F0E442",
highlight_mir_color = "#CC79A7",
highlight_edge_color = "#e41a1c",
highlight_circ_alpha = 0.9,
highlight_lnc_alpha = 0.9,
highlight_mir_alpha = 0.9,
highlight_m_alpha = 0.9,
netlayout = NULL,
pdf_height = 15,
pdf_width = 15,
vertex_label_family = "sans") {
# 判断 highlight_node 是lnc circ mir OR mRNA.
if (highlight_node %in% c(DElnc$degs, DEcirc$degs)) {
# 如果是，将高亮节点设置为 TF 颜色，与之相连的节点设置为目标颜色
all_downstream_nodes <- get_downstream(network, highlight_node)
for (node in all_downstream_nodes) {
if (node %in% DEmir$degs) {
V(network)[node]$color <- adjustcolor(highlight_mir_color, alpha.f = highlight_mir_alpha)
} else if (node %in% DElnc$degs) {
V(network)[node]$color <- adjustcolor(highlight_lnc_color, alpha.f = highlight_lnc_alpha)
} else if (node %in% DEcirc$degs) {
V(network)[node]$color <- adjustcolor(highlight_circ_color, alpha.f = highlight_circ_alpha)
} else if (node %in% DEm$up) {
V(network)[node]$color <- adjustcolor("#fb8072", alpha.f = highlight_m_alpha)
} else {
V(network)[node]$color <- adjustcolor("#80b1d3", alpha.f = highlight_m_alpha)
}
}
} else if (highlight_node %in% DEmir$degs) {
# 如果不是，将高亮节点设置为目标颜色，与之相连的节点设置为 TF 颜色
connected_nodes <- neighbors(network, highlight_node, mode = "all")
connected_nodes2 <- neighbors(network, highlight_node, mode = "in")
connected_nodes3 <- c(highlight_node, names(connected_nodes2))
connected_nodes4 <- neighbors(network, highlight_node, mode = "out")
connected_nodes5 <- c(highlight_node, names(connected_nodes4))
V(network)[highlight_node]$color <- (adjustcolor(highlight_mir_color, alpha.f = 0.9))
for (node in names(connected_nodes)) {
if (node %in% DElnc$degs) {
V(network)[node]$color <- adjustcolor(highlight_lnc_color, alpha.f = highlight_lnc_alpha)
} else if (node %in% DEcirc$degs) {
V(network)[node]$color <- adjustcolor(highlight_circ_color, alpha.f = highlight_circ_alpha)
} else if (node %in% DEm$up) {
V(network)[node]$color <- adjustcolor("#fb8072", alpha.f = highlight_m_alpha)
} else {
V(network)[node]$color <- adjustcolor("#80b1d3", alpha.f = highlight_m_alpha)
}
}
} else {
# 如果不是，将高亮节点设置为目标颜色，与之相连的节点设置为 TF 颜色
all_upstream_nodes <- get_upstream(network, highlight_node)
for (node in all_upstream_nodes) {
if (node %in% DEmir$degs) {
V(network)[node]$color <- adjustcolor(highlight_mir_color, alpha.f = highlight_mir_alpha)
} else if (node %in% DElnc$degs) {
V(network)[node]$color <- adjustcolor(highlight_lnc_color, alpha.f = highlight_lnc_alpha)
} else if (node %in% DEcirc$degs) {
V(network)[node]$color <- adjustcolor(highlight_circ_color, alpha.f = highlight_circ_alpha)
} else if (node %in% DEm$up) {
V(network)[node]$color <- adjustcolor("#fb8072", alpha.f = highlight_m_alpha)
} else {
V(network)[node]$color <- adjustcolor("#80b1d3", alpha.f = highlight_m_alpha)
}
}
}
# 获取所有与 highlight_node 相连的边
if (highlight_node %in% c(DElnc$degs, DEcirc$degs)) {
connected_edges <- incident_edges(network, all_downstream_nodes, mode = "out")
E(network)[unlist(connected_edges)]$color <- highlight_edge_color
} else if (highlight_node %in% DEmir$degs) {
connected_edges <- incident_edges(network, connected_nodes3, mode = "in")
connected_edges2 <- incident_edges(network, connected_nodes5, mode = "out")
E(network)[unlist(connected_edges)]$color <- highlight_edge_color
E(network)[unlist(connected_edges2)]$color <- highlight_edge_color
} else {
connected_edges <- incident_edges(network, all_upstream_nodes, mode = "in")
E(network)[unlist(connected_edges)]$color <- highlight_edge_color
}
# 设置相关节点和边的颜色
#E(network)[unlist(connected_edges)]$color <- highlight_edge_color
#设置网络图的布局
if (is.null(netlayout)) {
netlayout <- layout_(network,
with_kk())
}
# 设置 PDF 的输出文件名、高度和宽度
pdf.name <- paste0("ceRNA_highlight_", highlight_node, ".pdf")
pdf(file = pdf.name, height = pdf_height, width = pdf_width)
# 绘制网络图
plot(network, edge.arrow.size = 0.4,
layout = netlayout,
vertex.label.family = vertex_label_family,
res = c(1200, 1200))
# 关闭 PDF 设备
dev.off()
}
#
plot_highlighted_CEnetwork(network, highlight_node = "mmu-miR-23b-3p")
#
plot_highlighted_CEnetwork(network, highlight_node = "Gm21986")
#
plot_highlighted_CEnetwork(network, highlight_node = "Prrx1")
Cons_Up_net <- function(clipExpNum_mir2m_cutoff = 1,
databaseNum_mir2m_cutoff = 3,
clipExpNum_lnc2mir_cutoff = 1,
clipExpNum_circ2mir_cutoff = 1
){
library(dplyr)
library(tidyverse)
library(tidyr)
load("miRNA_mRNA_mouse.rdata")
load("lncRNA_miRNA_mouse.rdata")
load("circRNA_miRNA_mouse.rdata")
sub <- subset(miRNA_mRNA_mouse, clipExpNum >= clipExpNum_mir2m_cutoff & (PITA + RNA22 + miRmap + microT + miRanda + PicTar + TargetScan) >= databaseNum_mir2m_cutoff)
UPm2mir <- sub[which(sub$mRNA %in% DEm$up),]
UPm2mir <-  UPm2mir[, c("miRNA", "mRNA")]
UPm2Dmir <- UPm2mir[which(UPm2mir$miRNA %in% DEmir$down),]
sub2 <- subset(lncRNA_miRNA_mouse, clipExpNum >= clipExpNum_lnc2mir_cutoff)
Dmir2lnc <- sub2[which(sub2$miRNA %in% UPm2Dmir$miRNA),]
Dmir2Hlnc <- Dmir2lnc[which(Dmir2lnc$lncRNA %in% DElnc$up),]
sub3 <- subset(circRNA_miRNA_mouse, clipExpNum >= clipExpNum_circ2mir_cutoff)
Dmir2circ <- sub3[which(sub3$miRNA %in% UPm2Dmir$miRNA),]
Dmir2Hcirc <- Dmir2circ[which(Dmir2circ$circRNA %in% DEcirc$up),]
UPm2Dmir <- subset(UPm2mir, miRNA %in% c(Dmir2Hlnc$miRNA, Dmir2Hcirc$miRNA))
#Construct Network of UP mRNAs
mir2m <- UPm2Dmir[, c("miRNA", "mRNA")]
colnames(mir2m) <- c("From", "To")
lnc2mir <- Dmir2Hlnc[, c("lncRNA", "miRNA")]
colnames(lnc2mir) <- c("From", "To")
circ2mir <- Dmir2Hcirc[, c("circRNA", "miRNA")]
colnames(circ2mir) <- c("From", "To")
UPnetwork <- rbind(mir2m, lnc2mir, circ2mir)
write.table(UPnetwork, file = "UPnetwork.txt", sep = "\t", row.names = FALSE)
return(UPnetwork)
}
UPnetwork <- Cons_Up_net()
Cons_Down_net <- function(clipExpNum_mir2m_cutoff = 1,
databaseNum_mir2m_cutoff = 3,
clipExpNum_lnc2mir_cutoff = 1,
clipExpNum_circ2mir_cutoff = 1
){
library(dplyr)
library(tidyverse)
library(tidyr)
load("miRNA_mRNA_mouse.rdata")
load("lncRNA_miRNA_mouse.rdata")
load("circRNA_miRNA_mouse.rdata")
sub <- subset(miRNA_mRNA_mouse, clipExpNum >= clipExpNum_mir2m_cutoff & (PITA + RNA22 + miRmap + microT + miRanda + PicTar + TargetScan) >= databaseNum_mir2m_cutoff)
Dm2mir <- sub[which(sub$mRNA %in% DEm$down),]
Dm2mir <-  Dm2mir[, c("miRNA", "mRNA")]
Dm2Hmir <- Dm2mir[which(Dm2mir$miRNA %in% DEmir$up),]
sub2 <- subset(lncRNA_miRNA_mouse, clipExpNum >= clipExpNum_lnc2mir_cutoff)
Hmir2lnc <- sub2[which(sub2$miRNA %in% Dm2Hmir$miRNA),]
Hmir2Dlnc <- Hmir2lnc[which(Hmir2lnc$lncRNA %in% DElnc$down),]
sub3 <- subset(circRNA_miRNA_mouse, clipExpNum >= clipExpNum_circ2mir_cutoff)
Hmir2circ <- sub3[which(sub3$miRNA %in% Dm2Hmir$miRNA),]
Hmir2Dcirc <- Hmir2circ[which(Hmir2circ$circRNA %in% DEcirc$down),]
Dm2Hmir <- subset(Dm2Hmir, miRNA %in% c(Hmir2Dlnc$miRNA, Hmir2Dcirc$miRNA))
#Construct Network of UP mRNAs
mir2m <- Dm2Hmir[, c("miRNA", "mRNA")]
colnames(mir2m) <- c("From", "To")
lnc2mir <- Hmir2Dlnc[, c("lncRNA", "miRNA")]
colnames(lnc2mir) <- c("From", "To")
circ2mir <- Hmir2Dcirc[, c("circRNA", "miRNA")]
colnames(circ2mir) <- c("From", "To")
DOWNnetwork <- rbind(mir2m, lnc2mir, circ2mir)
write.table(DOWNnetwork, file = "DOWNnetwork.txt", sep = "\t", row.names = FALSE)
return(DOWNnetwork)
}
DOWNnetwork <- Cons_Down_net()
Cons_my_net <-  function(my_mRNA,
clipExpNum_mir2m_cutoff = 1,
databaseNum_mir2m_cutoff = 3,
clipExpNum_lnc2mir_cutoff = 1,
clipExpNum_circ2mir_cutoff = 1)
{
library(dplyr)
library(tidyverse)
library(tidyr)
load("miRNA_mRNA_mouse.rdata")
load("lncRNA_miRNA_mouse.rdata")
load("circRNA_miRNA_mouse.rdata")
if (my_mRNA %in% DEm$up) {
sub <- subset(miRNA_mRNA_mouse, clipExpNum >= clipExpNum_mir2m_cutoff & (PITA + RNA22 + miRmap + microT + miRanda + PicTar + TargetScan) >= databaseNum_mir2m_cutoff)
UPm2mir <- sub[which(sub$mRNA %in% my_mRNA),]
UPm2mir <-  UPm2mir[, c("miRNA", "mRNA")]
UPm2Dmir <- UPm2mir[which(UPm2mir$miRNA %in% DEmir$down),]
sub2 <- subset(lncRNA_miRNA_mouse, clipExpNum >= clipExpNum_lnc2mir_cutoff)
Dmir2lnc <- sub2[which(sub2$miRNA %in% UPm2Dmir$miRNA),]
Dmir2Hlnc <- Dmir2lnc[which(Dmir2lnc$lncRNA %in% DElnc$up),]
sub3 <- subset(circRNA_miRNA_mouse, clipExpNum >= clipExpNum_circ2mir_cutoff)
Dmir2circ <- sub3[which(sub3$miRNA %in% UPm2Dmir$miRNA),]
Dmir2Hcirc <- Dmir2circ[which(Dmir2circ$circRNA %in% DEcirc$up),]
UPm2Dmir <- subset(UPm2mir, miRNA %in% c(Dmir2Hlnc$miRNA, Dmir2Hcirc$miRNA))
#Construct Network of UP mRNAs
mir2m <- UPm2Dmir[, c("miRNA", "mRNA")]
colnames(mir2m) <- c("From", "To")
lnc2mir <- Dmir2Hlnc[, c("lncRNA", "miRNA")]
colnames(lnc2mir) <- c("From", "To")
circ2mir <- Dmir2Hcirc[, c("circRNA", "miRNA")]
colnames(circ2mir) <- c("From", "To")
mynetwork <- rbind(mir2m, lnc2mir, circ2mir)
write.table(mynetwork, file = "mynetwork.txt", sep = "\t", row.names = FALSE)
return(mynetwork)
} else {
sub <- subset(miRNA_mRNA_mouse, clipExpNum >= clipExpNum_mir2m_cutoff & (PITA + RNA22 + miRmap + microT + miRanda + PicTar + TargetScan) >= databaseNum_mir2m_cutoff)
Dm2mir <- sub[which(sub$mRNA %in% my_mRNA),]
Dm2mir <-  Dm2mir[, c("miRNA", "mRNA")]
Dm2Hmir <- Dm2mir[which(Dm2mir$miRNA %in% DEmir$up),]
sub2 <- subset(lncRNA_miRNA_mouse, clipExpNum >= clipExpNum_lnc2mir_cutoff)
Hmir2lnc <- sub2[which(sub2$miRNA %in% Dm2Hmir$miRNA),]
Hmir2Dlnc <- Hmir2lnc[which(Hmir2lnc$lncRNA %in% DElnc$down),]
sub3 <- subset(circRNA_miRNA_mouse, clipExpNum >= clipExpNum_circ2mir_cutoff)
Hmir2circ <- sub3[which(sub3$miRNA %in% Dm2Hmir$miRNA),]
Hmir2Dcirc <- Hmir2circ[which(Hmir2circ$circRNA %in% DEcirc$down),]
Dm2Hmir <- subset(Dm2Hmir, miRNA %in% c(Hmir2Dlnc$miRNA, Hmir2Dcirc$miRNA))
#Construct Network of UP mRNAs
mir2m <- Dm2Hmir[, c("miRNA", "mRNA")]
colnames(mir2m) <- c("From", "To")
lnc2mir <- Hmir2Dlnc[, c("lncRNA", "miRNA")]
colnames(lnc2mir) <- c("From", "To")
circ2mir <- Hmir2Dcirc[, c("circRNA", "miRNA")]
colnames(circ2mir) <- c("From", "To")
mynetwork <- rbind(mir2m, lnc2mir, circ2mir)
write.table(mynetwork, file = "mynetwork.txt", sep = "\t", row.names = FALSE)
return(mynetwork)
}
}
mynetwork <- Cons_my_net(my_mRNA = c("Lmo3", "Igf2", "Hnf1b"))
mynetwork <- Cons_my_net(my_mRNA = c("Lmo3"))
View(mynetwork)
plot_CEnetwork(net = mynetwork,
pdf.name = "ceRNA_my.pdf")
mynetwork <- Cons_my_net(my_mRNA = c("Lancl3"))
plot_CEnetwork(net = mynetwork,
pdf.name = "ceRNA_my.pdf")
Cons_my_net <-  function(my_mRNA,
clipExpNum_mir2m_cutoff = 1,
databaseNum_mir2m_cutoff = 3,
clipExpNum_lnc2mir_cutoff = 1,
clipExpNum_circ2mir_cutoff = 1)
{
library(dplyr)
library(tidyverse)
library(tidyr)
load("miRNA_mRNA_mouse.rdata")
load("lncRNA_miRNA_mouse.rdata")
load("circRNA_miRNA_mouse.rdata")
if (my_mRNA %in% DEm$up) {
sub <- subset(miRNA_mRNA_mouse, clipExpNum >= clipExpNum_mir2m_cutoff & (PITA + RNA22 + miRmap + microT + miRanda + PicTar + TargetScan) >= databaseNum_mir2m_cutoff)
UPm2mir <- sub[which(sub$mRNA %in% my_mRNA),]
UPm2mir <-  UPm2mir[, c("miRNA", "mRNA")]
UPm2Dmir <- UPm2mir[which(UPm2mir$miRNA %in% DEmir$down),]
sub2 <- subset(lncRNA_miRNA_mouse, clipExpNum >= clipExpNum_lnc2mir_cutoff)
Dmir2lnc <- sub2[which(sub2$miRNA %in% UPm2Dmir$miRNA),]
Dmir2Hlnc <- Dmir2lnc[which(Dmir2lnc$lncRNA %in% DElnc$up),]
sub3 <- subset(circRNA_miRNA_mouse, clipExpNum >= clipExpNum_circ2mir_cutoff)
Dmir2circ <- sub3[which(sub3$miRNA %in% UPm2Dmir$miRNA),]
Dmir2Hcirc <- Dmir2circ[which(Dmir2circ$circRNA %in% DEcirc$up),]
UPm2Dmir <- subset(UPm2mir, miRNA %in% c(Dmir2Hlnc$miRNA, Dmir2Hcirc$miRNA))
#Construct Network of UP mRNAs
mir2m <- UPm2Dmir[, c("miRNA", "mRNA")]
colnames(mir2m) <- c("From", "To")
lnc2mir <- Dmir2Hlnc[, c("lncRNA", "miRNA")]
colnames(lnc2mir) <- c("From", "To")
circ2mir <- Dmir2Hcirc[, c("circRNA", "miRNA")]
colnames(circ2mir) <- c("From", "To")
mynetwork <- rbind(mir2m, lnc2mir, circ2mir)
write.table(mynetwork, file = "mynetwork.txt", sep = "\t", row.names = FALSE)
return(mynetwork)
} else {
sub <- subset(miRNA_mRNA_mouse, clipExpNum >= clipExpNum_mir2m_cutoff & (PITA + RNA22 + miRmap + microT + miRanda + PicTar + TargetScan) >= databaseNum_mir2m_cutoff)
Dm2mir <- sub[which(sub$mRNA %in% my_mRNA),]
Dm2mir <-  Dm2mir[, c("miRNA", "mRNA")]
Dm2Hmir <- Dm2mir[which(Dm2mir$miRNA %in% DEmir$up),]
sub2 <- subset(lncRNA_miRNA_mouse, clipExpNum >= clipExpNum_lnc2mir_cutoff)
Hmir2lnc <- sub2[which(sub2$miRNA %in% Dm2Hmir$miRNA),]
Hmir2Dlnc <- Hmir2lnc[which(Hmir2lnc$lncRNA %in% DElnc$down),]
sub3 <- subset(circRNA_miRNA_mouse, clipExpNum >= clipExpNum_circ2mir_cutoff)
Hmir2circ <- sub3[which(sub3$miRNA %in% Dm2Hmir$miRNA),]
Hmir2Dcirc <- Hmir2circ[which(Hmir2circ$circRNA %in% DEcirc$down),]
Dm2Hmir <- subset(Dm2Hmir, miRNA %in% c(Hmir2Dlnc$miRNA, Hmir2Dcirc$miRNA))
#Construct Network of UP mRNAs
mir2m <- Dm2Hmir[, c("miRNA", "mRNA")]
colnames(mir2m) <- c("From", "To")
lnc2mir <- Hmir2Dlnc[, c("lncRNA", "miRNA")]
colnames(lnc2mir) <- c("From", "To")
circ2mir <- Hmir2Dcirc[, c("circRNA", "miRNA")]
colnames(circ2mir) <- c("From", "To")
mynetwork <- rbind(mir2m, lnc2mir, circ2mir)
write.table(mynetwork, file = paste0("mynetwork_", my_mRNA, ".txt"), sep = "\t", row.names = FALSE)
return(mynetwork)
}
}
mynetwork <- Cons_my_net(my_mRNA = "Lancl3")
plot_CEnetwork(net = mynetwork,
pdf.name = "ceRNA_my.pdf")
#' @param pdf_height An integer representing the height of the PDF output file in inches. Default is 15.
#' @param pdf_width An integer representing the width of the PDF output file in inches. Default is 15.
#' @param vertex_label_family A character string representing the font family for the vertex labels in the network plot. Default is "sans".
#' @return This function outputs a PDF file of the network plot with the highlighted node and its connected edges colored differently.
#' @export
#' @import igraph
#' @import magrittr
#' @import dplyr
#' @import ggplot2
#' @import circlize
plot_highlighted_CEnetwork <- function(network,
highlight_node,
highlight_circ_color = "#459943",
highlight_lnc_color = "#F0E442",
highlight_mir_color = "#CC79A7",
highlight_edge_color = "#e41a1c",
highlight_circ_alpha = 0.9,
highlight_lnc_alpha = 0.9,
highlight_mir_alpha = 0.9,
highlight_m_alpha = 0.9,
netlayout = NULL,
pdf_height = 15,
pdf_width = 15,
vertex_label_family = "sans") {
# 判断 highlight_node 是lnc circ mir OR mRNA.
if (highlight_node %in% c(DElnc$degs, DEcirc$degs)) {
# 如果是，将高亮节点设置为 TF 颜色，与之相连的节点设置为目标颜色
all_downstream_nodes <- get_downstream(network, highlight_node)
for (node in all_downstream_nodes) {
if (node %in% DEmir$degs) {
V(network)[node]$color <- adjustcolor(highlight_mir_color, alpha.f = highlight_mir_alpha)
} else if (node %in% DElnc$degs) {
V(network)[node]$color <- adjustcolor(highlight_lnc_color, alpha.f = highlight_lnc_alpha)
} else if (node %in% DEcirc$degs) {
V(network)[node]$color <- adjustcolor(highlight_circ_color, alpha.f = highlight_circ_alpha)
} else if (node %in% DEm$up) {
V(network)[node]$color <- adjustcolor("#fb8072", alpha.f = highlight_m_alpha)
} else {
V(network)[node]$color <- adjustcolor("#80b1d3", alpha.f = highlight_m_alpha)
}
}
} else if (highlight_node %in% DEmir$degs) {
# 如果不是，将高亮节点设置为目标颜色，与之相连的节点设置为 TF 颜色
connected_nodes <- neighbors(network, highlight_node, mode = "all")
connected_nodes2 <- neighbors(network, highlight_node, mode = "in")
connected_nodes3 <- c(highlight_node, names(connected_nodes2))
connected_nodes4 <- neighbors(network, highlight_node, mode = "out")
connected_nodes5 <- c(highlight_node, names(connected_nodes4))
V(network)[highlight_node]$color <- (adjustcolor(highlight_mir_color, alpha.f = 0.9))
for (node in names(connected_nodes)) {
if (node %in% DElnc$degs) {
V(network)[node]$color <- adjustcolor(highlight_lnc_color, alpha.f = highlight_lnc_alpha)
} else if (node %in% DEcirc$degs) {
V(network)[node]$color <- adjustcolor(highlight_circ_color, alpha.f = highlight_circ_alpha)
} else if (node %in% DEm$up) {
V(network)[node]$color <- adjustcolor("#fb8072", alpha.f = highlight_m_alpha)
} else {
V(network)[node]$color <- adjustcolor("#80b1d3", alpha.f = highlight_m_alpha)
}
}
} else {
# 如果不是，将高亮节点设置为目标颜色，与之相连的节点设置为 TF 颜色
all_upstream_nodes <- get_upstream(network, highlight_node)
for (node in all_upstream_nodes) {
if (node %in% DEmir$degs) {
V(network)[node]$color <- adjustcolor(highlight_mir_color, alpha.f = highlight_mir_alpha)
} else if (node %in% DElnc$degs) {
V(network)[node]$color <- adjustcolor(highlight_lnc_color, alpha.f = highlight_lnc_alpha)
} else if (node %in% DEcirc$degs) {
V(network)[node]$color <- adjustcolor(highlight_circ_color, alpha.f = highlight_circ_alpha)
} else if (node %in% DEm$up) {
V(network)[node]$color <- adjustcolor("#fb8072", alpha.f = highlight_m_alpha)
} else {
V(network)[node]$color <- adjustcolor("#80b1d3", alpha.f = highlight_m_alpha)
}
}
}
# 获取所有与 highlight_node 相连的边
if (highlight_node %in% c(DElnc$degs, DEcirc$degs)) {
connected_edges <- incident_edges(network, all_downstream_nodes, mode = "out")
E(network)[unlist(connected_edges)]$color <- highlight_edge_color
} else if (highlight_node %in% DEmir$degs) {
connected_edges <- incident_edges(network, connected_nodes3, mode = "in")
connected_edges2 <- incident_edges(network, connected_nodes5, mode = "out")
E(network)[unlist(connected_edges)]$color <- highlight_edge_color
E(network)[unlist(connected_edges2)]$color <- highlight_edge_color
} else {
connected_edges <- incident_edges(network, all_upstream_nodes, mode = "in")
E(network)[unlist(connected_edges)]$color <- highlight_edge_color
}
# 设置相关节点和边的颜色
#E(network)[unlist(connected_edges)]$color <- highlight_edge_color
#设置网络图的布局
if (is.null(netlayout)) {
netlayout <- layout_(network,
with_kk())
}
# 设置 PDF 的输出文件名、高度和宽度
pdf.name <- paste0("ceRNA_highlight_", highlight_node, ".pdf")
pdf(file = pdf.name, height = pdf_height, width = pdf_width)
# 绘制网络图
plot(network, edge.arrow.size = 0.4,
layout = netlayout,
vertex.label.family = vertex_label_family,
res = c(1200, 1200))
# 关闭 PDF 设备
dev.off()
}
setwd("F:\\Desktop\\CEnetwork\\R package")
#install.packages("roxygen2")
library(roxygen2)
library(devtools)
usethis::create_package("CEnetwork")
setwd("CEnetwork")
#定义两个data
load("F:\\Desktop\\CEnetwork\\circRNA_miRNA_mouse.rdata")
usethis::use_data(circRNA_miRNA_mouse, overwrite = TRUE)
load("F:\\Desktop\\CEnetwork\\lncRNA_miRNA_mouse.rdata")
usethis::use_data(lncRNA_miRNA_mouse, overwrite = TRUE)
load("F:\\Desktop\\CEnetwork\\miRNA_mRNA_mouse.rdata")
usethis::use_data(miRNA_mRNA_mouse, overwrite = TRUE)
usethis::use_data_raw()
setwd("F:\\Desktop\\CEnetwork\\R package\\CEnetwork")
document()
install_github("PhiliJ/CEnetwork", dependencies = T)
